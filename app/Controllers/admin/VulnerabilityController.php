<?php

namespace App\Controllers\Admin;

use App\Controllers\BaseController;
use App\Entities\BeneficiaryVulnerabilities;
use App\Entities\Vulnerability;
use CodeIgniter\Exceptions\PageNotFoundException;

class VulnerabilityController extends BaseController
{
    private $session;
    private const PAGINATION = 100;
    private const STATUS = 4;

    public function __construct(){
        $session = session()->get();
    }

    public function index(){
        $areaModel = model('AreaModel');
        $vulnerabilityModel = model('VulnerabilityModel');
        $data['session'] = session()->get();
        $data['areas'] = $areaModel->where('status_id', 1)->findAll();
        $data['vulnerabilities'] = $vulnerabilityModel
                            ->join('status s','s.status_id = vulnerabilities.status_id','LEFT')
                            ->select('vulnerabilities.*, s.status_name')
                            ->paginate(self::PAGINATION);
        return view('admin/vulnerability/index',$data);
    }
    
    public function add(){
        $data['session'] = session()->get();
        $areaModel = model('AreaModel');
        $data['areas'] = $areaModel->where('status_id', 1)->findAll();
        $statusModel = model('StatusModel');
        $data['status'] = $statusModel->where('status_category',1)->findAll();
        
        return view('admin/vulnerability/add',$data);
    }

    public function edit(int $vulnerability_id){
        $vulnerabilityModel = model('VulnerabilityModel');
        if(!$data['vulnerability'] = $vulnerabilityModel->where('vulnerability_id', $vulnerability_id)->first()){
            throw PageNotFoundException::forPageNotFound();
        }
        $data['session'] = session()->get();
        $areaModel = model('AreaModel');
        $data['areas'] = $areaModel->where('status_id', 1)->findAll();
        $statusModel = model('StatusModel');
        $data['status'] = $statusModel->where('status_category',1)->findAll();
        return view('admin/vulnerability/edit',$data);
    }

    public function store(){
        $validation = service('validation');
        $validation->setRules([
            'vulnerability_name'    => ['label' => 'name','rules' => 'required'],
        ]);

        if(!$validation->withRequest($this->request)->run()){
            return redirect()->back()->withInput()->with('errors',$validation->getErrors());
        }

        $form = $this->request->getPost();
        $register = [
            'status_id'     => 1,//1 active
        ];
        
        $suportData = array_merge($form,$register);
        $suport = new Vulnerability($suportData);
        $vulnerabilityModel = model('VulnerabilityModel');

        $vulnerabilityModel->save($suport);
        return redirect()->route('admin/vulnerabilities')->with('msg',[
            'type' => 'green',
            'body' => 'Nueva vulnerabilidad registrada exitosamente!'
        ]);
    }

    public function update(){
        $validation = service('validation');
        $validation->setRules([
            'vulnerability_name'   => ['label' => 'descripciÃ³n' ,'rules' => 'required'],
        ]);
        
        if(!$validation->withRequest($this->request)->run()){
            return redirect()->back()->withInput()->with('errors',$validation->getErrors());
        }
        
        $model = model('VulnerabilityModel');
        if(!$model->where('vulnerability_id', (int)trim($this->request->getVar('vulnerability_id')))->first()){
            throw PageNotFoundException::forPageNotFound();
        }
        $model->save([
            'vulnerability_id'              => trim($this->request->getVar('vulnerability_id')),
            'vulnerability_name'            => trim($this->request->getVar('vulnerability_name')),
            'vulnerability_description'     => trim($this->request->getVar('vulnerability_description')),
            'status_id'                     => (int)trim($this->request->getVar('status_id')),
        ]);
        return redirect()->route('admin/vulnerabilities')->with('msg',[
            'type'=>'green',
            'body'=> 'La vulnerabilidad se actualizo exitosamente.'
        ]);   
    }

    public function vulnerabilyBeneficiary() {
        $beneficairy_id = $this->request->getPost('beneficiary');
        $model = model('BeneficiaryVulnerabilitiesModel');
        $vulnerabilities = $model->join('vulnerabilities v','beneficiary_vulnerabilities.vulnerability_id = v.vulnerability_id','LEFT')
                                ->select('beneficiary_vulnerabilities.bevu_observation,v.vulnerability_name')
                                ->where('beneficiary_vulnerabilities.beneficiary_id', $beneficairy_id)->findAll();
        echo json_encode($vulnerabilities);
    }

    public function storeVulnerabilyBeneficiary(){
        $beneficairy_id = $this->request->getPost('beneficiary');
        $vulnerability_id = $this->request->getPost('vulnerability');
        $observation = $this->request->getPost('observation');
        $data = [
            'beneficiary_id'        => $beneficairy_id,
            'bevu_observation'      => $observation,
            'vulnerability_id'      => $vulnerability_id,
        ];
        
        $vulnerability = new BeneficiaryVulnerabilities($data);
        $vulnerabilityModel = model('BeneficiaryVulnerabilitiesModel');

        $vulnerabilityModel->save($vulnerability);
        echo json_encode("ok");
    }
}
